#!/bin/bash
#SBATCH --gres=gpu:1
#SBATCH --constraint=v100
#SBATCH --mem=32G
#SBATCH --cpus-per-task=16
#SBATCH --time=2:59:00




# ------------------------------------------------------------------------------
# 1) Load necessary modules (if your cluster uses modules)
#    The specifics here depend on your HPC environment.
#    Examples:
module load python/3.11
module load StdEnv/2020 cudacore/.11.7.0 python/3.8.10

pwd

# ------------------------------------------------------------------------------
# 2) (Optional) Activate a conda or virtualenv environment
#    If you prefer using a virtualenv:
#    python -m venv ~/envs/xarm6_env
#    source ~/envs/xarm6_env/bin/activate
#    Or if using conda:
#    conda create -n xarm6_env python=3.9 -y
#    conda activate xarm6_env

# Here we assume you already have a virtual environment named "xarm6_env".
# # Adjust to your environment setup:
source ~/envs/xarm6_env_new/bin/activate

# ------------------------------------------------------------------------------
# 3) Install dependencies from requirements.txt
#    (If you have not already installed them in your environment)
python -m pip install --upgrade pip

# ------------------------------------------------------------------------------
# 4) Navigate to your repo folder (where your training script is located)
cd /home/hnigam/projects/def-tzou/hnigam/arm-robotics-rl_training
ls
python -m pip install -r requirements.txt --index-url=https://pypi.org/simple

# ------------------------------------------------------------------------------
# 5) Run your training script
#    This is the Python script containing the PPO training code you posted
python train.py

# ------------------------------------------------------------------------------
# Notes:
# - If your script is named differently (e.g., "train_xarm6.py"), change accordingly.
# - Checkpoints and TensorBoard logs will be saved to the directories specified
#   inside your script (e.g., './checkpoints/' and './ppo_xarm6_tensorboard/').
# - Ensure that those paths exist or are created automatically by your script.
# - Slurm will capture stdout/stderr in xarm6_training_%j.out / xarm6_training_%j.err
#   where %j is the job ID.
# ------------------------------------------------------------------------------
